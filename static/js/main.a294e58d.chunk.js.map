{"version":3,"sources":["CardView.js","CardViewArray.js","App.js","index.js"],"names":["CardView","card","useState","flip","setflip","height","setHeight","frontElement","useRef","backElement","set_Height","fheight","current","getBoundingClientRect","bheight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","onClick","className","style","ref","map","option","key","CardViewArray","cards","id","App","setCards","categories","setCategories","conversion","str","text","document","createElement","innerHTML","value","categoryElement","amtElement","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","incorrect_answers","s","correct_answer","Date","now","sort","random","htmlFor","c","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a294e58d.chunk.js","sourcesContent":["import React, { useState, useEffect,useRef } from 'react'\r\n\r\nexport default function CardView({ card}) {\r\n\r\n    const [flip, setflip] = useState(false);\r\n    const [height, setHeight] = useState('initial');\r\n    const frontElement = useRef();\r\n    const backElement = useRef();\r\n\r\n    function set_Height(){\r\n        const fheight = frontElement.current.getBoundingClientRect().height ;\r\n        const bheight = backElement.current.getBoundingClientRect().height ;\r\n        setHeight(Math.max(fheight,bheight,100))\r\n    }\r\n    useEffect(set_Height,[card.question,card.answer,card.options]);\r\n    useEffect(()=>{\r\n        window.addEventListener('resize',set_Height)\r\n        return ()=>window.removeEventListener('resize',set_Height)\r\n    },[]);\r\n   \r\n    return (\r\n        <div onClick={() => {setflip(!flip)}}\r\n            className={`card ${flip ? 'flip' : ''}`}\r\n            style ={{height : height}}\r\n        >\r\n            <div className=\"front\" ref={frontElement}>\r\n                {card.question}\r\n                <ol className=\"card-options\">\r\n                    {card.options.map(option => {\r\n                        return <li className=\"card-option\" key = {option}>\r\n                            {option}\r\n                        </li>\r\n                    })}\r\n                </ol>\r\n\r\n            </div>\r\n            <div className=\"back\" ref ={backElement} >\r\n                {card.answer}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport CardView from './CardView';\r\n\r\nexport default function CardViewArray({cards}) {\r\n    return (\r\n        <div className = \"card-grid\">\r\n        {\r\n            cards.map(card=>{\r\n                return <CardView card = {card} key = {card.id}></CardView>\r\n            })\r\n        }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect,useRef } from 'react';\nimport './App.css';\nimport CardViewArray from './CardViewArray';\nimport axios from 'axios';\n//var flip=false;\nfunction App() {\n  const [cards, setCards] = useState([]);\n  \n  const [categories,setCategories] = useState([]);\n  function conversion(str){\n    const text = document.createElement('textarea');\n    text.innerHTML = str;\n    return text.value;\n  }\n\n  const categoryElement = useRef();\n  const amtElement  =useRef();\n  useEffect(()=>{\n    axios.get('https://opentdb.com/api_category.php')\n          .then(res =>{\n              setCategories(res.data.trivia_categories);\n          })\n  },[])\n  \n  function submitHelper(e){\n    e.preventDefault();\n    axios.get('https://opentdb.com/api.php',{\n      params : {\n        amount: amtElement.current.value,\n        category : categoryElement.current.value\n      }\n    })\n    .then(res => {\n      setCards(res.data.results.map((questionItem, index) => {\n        const options = [\n          ...questionItem.incorrect_answers.map(s=>conversion(s)),\n          conversion(questionItem.correct_answer) \n        ]\n        return {\n          id: `${index}- ${Date.now}`,\n          question:conversion(questionItem.question),\n          answer : conversion(questionItem.correct_answer),\n          options : options.sort(()=>Math.random() - 0.5)\n        }\n      }))\n    })\n\n  }\n  // function  loadHandler(){\n  //   flip = !flip;\n  //   console.log(flip);\n  // }\n\n  return (\n\n    <>\n      <form className=\"header\" onSubmit = {submitHelper}>\n        <div className = \"form-grp\">\n          <label htmlFor = \"category\">Category</label>\n          <select id = \"category\" ref = {categoryElement}>\n            {categories.map(c=>{\n              return  <option value = {c.id} key={c.id} >{c.name}</option>\n            })}\n          </select>\n        </div>\n        <div className =\"form-grp\">\n          <label htmlFor = \"amt\">Number Of Questions</label>\n          <input type = \"number\" id =\"amt\" min=\"1\" step = \"1\" defaultValue ={10} ref = {amtElement}/>\n        </div>\n        <div className = \"form-grp\">\n          <button  className = \"btn\">Load Questions</button>\n        </div>\n      </form>\n      <div className=\"container \">\n        {true? <CardViewArray cards={cards}></CardViewArray> : <></>}\n      </div>\n    </>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}